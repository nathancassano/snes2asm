# -*- coding: utf-8 -*-

# 1111-0000 = 0101-0101
# 0000-1111 = 1010-1010
TileBitplaneDecodeLut = [
	0x00, 0x01, 0x04, 0x05, 0x10, 0x11, 0x14, 0x15, 0x40, 0x41, 0x44, 0x45, 0x50, 0x51, 0x54, 0x55,
	0x02, 0x03, 0x06, 0x07, 0x12, 0x13, 0x16, 0x17, 0x42, 0x43, 0x46, 0x47, 0x52, 0x53, 0x56, 0x57,
	0x08, 0x09, 0x0C, 0x0D, 0x18, 0x19, 0x1C, 0x1D, 0x48, 0x49, 0x4C, 0x4D, 0x58, 0x59, 0x5C, 0x5D,
	0x0A, 0x0B, 0x0E, 0x0F, 0x1A, 0x1B, 0x1E, 0x1F, 0x4A, 0x4B, 0x4E, 0x4F, 0x5A, 0x5B, 0x5E, 0x5F,
	0x20, 0x21, 0x24, 0x25, 0x30, 0x31, 0x34, 0x35, 0x60, 0x61, 0x64, 0x65, 0x70, 0x71, 0x74, 0x75,
	0x22, 0x23, 0x26, 0x27, 0x32, 0x33, 0x36, 0x37, 0x62, 0x63, 0x66, 0x67, 0x72, 0x73, 0x76, 0x77,
	0x28, 0x29, 0x2C, 0x2D, 0x38, 0x39, 0x3C, 0x3D, 0x68, 0x69, 0x6C, 0x6D, 0x78, 0x79, 0x7C, 0x7D,
	0x2A, 0x2B, 0x2E, 0x2F, 0x3A, 0x3B, 0x3E, 0x3F, 0x6A, 0x6B, 0x6E, 0x6F, 0x7A, 0x7B, 0x7E, 0x7F,
	0x80, 0x81, 0x84, 0x85, 0x90, 0x91, 0x94, 0x95, 0xC0, 0xC1, 0xC4, 0xC5, 0xD0, 0xD1, 0xD4, 0xD5,
	0x82, 0x83, 0x86, 0x87, 0x92, 0x93, 0x96, 0x97, 0xC2, 0xC3, 0xC6, 0xC7, 0xD2, 0xD3, 0xD6, 0xD7,
	0x88, 0x89, 0x8C, 0x8D, 0x98, 0x99, 0x9C, 0x9D, 0xC8, 0xC9, 0xCC, 0xCD, 0xD8, 0xD9, 0xDC, 0xDD,
	0x8A, 0x8B, 0x8E, 0x8F, 0x9A, 0x9B, 0x9E, 0x9F, 0xCA, 0xCB, 0xCE, 0xCF, 0xDA, 0xDB, 0xDE, 0xDF,
	0xA0, 0xA1, 0xA4, 0xA5, 0xB0, 0xB1, 0xB4, 0xB5, 0xE0, 0xE1, 0xE4, 0xE5, 0xF0, 0xF1, 0xF4, 0xF5,
	0xA2, 0xA3, 0xA6, 0xA7, 0xB2, 0xB3, 0xB6, 0xB7, 0xE2, 0xE3, 0xE6, 0xE7, 0xF2, 0xF3, 0xF6, 0xF7,
	0xA8, 0xA9, 0xAC, 0xAD, 0xB8, 0xB9, 0xBC, 0xBD, 0xE8, 0xE9, 0xEC, 0xED, 0xF8, 0xF9, 0xFC, 0xFD,
	0xAA, 0xAB, 0xAE, 0xAF, 0xBA, 0xBB, 0xBE, 0xBF, 0xEA, 0xEB, 0xEE, 0xEF, 0xFA, 0xFB, 0xFE, 0xFF
]

TileBitplaneEncodeLut = [
	0x00, 0x01, 0x10, 0x11, 0x02, 0x03, 0x12, 0x13, 0x20, 0x21, 0x30, 0x31, 0x22, 0x23, 0x32, 0x33,
	0x04, 0x05, 0x14, 0x15, 0x06, 0x07, 0x16, 0x17, 0x24, 0x25, 0x34, 0x35, 0x26, 0x27, 0x36, 0x37,
	0x40, 0x41, 0x50, 0x51, 0x42, 0x43, 0x52, 0x53, 0x60, 0x61, 0x70, 0x71, 0x62, 0x63, 0x72, 0x73,
	0x44, 0x45, 0x54, 0x55, 0x46, 0x47, 0x56, 0x57, 0x64, 0x65, 0x74, 0x75, 0x66, 0x67, 0x76, 0x77,
	0x08, 0x09, 0x18, 0x19, 0x0A, 0x0B, 0x1A, 0x1B, 0x28, 0x29, 0x38, 0x39, 0x2A, 0x2B, 0x3A, 0x3B,
	0x0C, 0x0D, 0x1C, 0x1D, 0x0E, 0x0F, 0x1E, 0x1F, 0x2C, 0x2D, 0x3C, 0x3D, 0x2E, 0x2F, 0x3E, 0x3F,
	0x48, 0x49, 0x58, 0x59, 0x4A, 0x4B, 0x5A, 0x5B, 0x68, 0x69, 0x78, 0x79, 0x6A, 0x6B, 0x7A, 0x7B,
	0x4C, 0x4D, 0x5C, 0x5D, 0x4E, 0x4F, 0x5E, 0x5F, 0x6C, 0x6D, 0x7C, 0x7D, 0x6E, 0x6F, 0x7E, 0x7F,
	0x80, 0x81, 0x90, 0x91, 0x82, 0x83, 0x92, 0x93, 0xA0, 0xA1, 0xB0, 0xB1, 0xA2, 0xA3, 0xB2, 0xB3,
	0x84, 0x85, 0x94, 0x95, 0x86, 0x87, 0x96, 0x97, 0xA4, 0xA5, 0xB4, 0xB5, 0xA6, 0xA7, 0xB6, 0xB7,
	0xC0, 0xC1, 0xD0, 0xD1, 0xC2, 0xC3, 0xD2, 0xD3, 0xE0, 0xE1, 0xF0, 0xF1, 0xE2, 0xE3, 0xF2, 0xF3,
	0xC4, 0xC5, 0xD4, 0xD5, 0xC6, 0xC7, 0xD6, 0xD7, 0xE4, 0xE5, 0xF4, 0xF5, 0xE6, 0xE7, 0xF6, 0xF7,
	0x88, 0x89, 0x98, 0x99, 0x8A, 0x8B, 0x9A, 0x9B, 0xA8, 0xA9, 0xB8, 0xB9, 0xAA, 0xAB, 0xBA, 0xBB,
	0x8C, 0x8D, 0x9C, 0x9D, 0x8E, 0x8F, 0x9E, 0x9F, 0xAC, 0xAD, 0xBC, 0xBD, 0xAE, 0xAF, 0xBE, 0xBF,
	0xC8, 0xC9, 0xD8, 0xD9, 0xCA, 0xCB, 0xDA, 0xDB, 0xE8, 0xE9, 0xF8, 0xF9, 0xEA, 0xEB, 0xFA, 0xFB,
	0xCC, 0xCD, 0xDC, 0xDD, 0xCE, 0xCF, 0xDE, 0xDF, 0xEC, 0xED, 0xFC, 0xFD, 0xEE, 0xEF, 0xFE, 0xFF
]

def Decode2Byte(b1, b2):
	t1 = ((b2 & 0x0F) << 4) | (b1 & 0x0F)
	t2 = ((b1 & 0xF0) >> 4) | (b2 & 0xF0)
	hi = TileBitplaneDecodeLut[t1]
	lo = TileBitplaneDecodeLut[t2]
	return hi,lo

def Encode2Byte(b1, b2):
	t1 = TileBitplaneEncodeLut[b1]
	t2 = TileBitplaneEncodeLut[b2]
	hi = ((t1 & 0x0F) << 4) | (t2 & 0x0F)
	lo = ((t2 & 0xF0) >> 4) | (t1 & 0xF0)
	return hi,lo

def Encode2bppTile(tile):
	data = bytearray(16)
	for line in xrange(0, 16, 2):
		offset = line * 4
		p1 = tile[offset+0] << 6 | tile[offset+1] << 4 | tile[offset+2] << 2 | tile[offset+3]
		p2 = tile[offset+4] << 6 | tile[offset+5] << 4 | tile[offset+6] << 2 | tile[offset+7]
		data[line], data[line+1] = Encode2Byte(p1, p2)
	return data

def Encode3bppTile(tile):

	data = bytearray(24)
	for line in xrange(0, 16, 2):
		offset = line * 4
		p1 = (tile[offset+0] & 0x3) << 6 | (tile[offset+1] & 0x3) << 4 | (tile[offset+2] & 0x3) << 2 | (tile[offset+3] & 0x3)
		p2 = (tile[offset+4] & 0x3) << 6 | (tile[offset+5] & 0x3) << 4 | (tile[offset+6] & 0x3) << 2 | (tile[offset+7] & 0x3)
		hi, lo = Encode2Byte(p1, p2)
		data[line], data[line+1] = hi, lo

	# Add the extra 3rd bit
	for x in xrange(0,8):
		row = 0
		for y in xrange(0,8):
			pix = tile[x*8+y]
			row |= ((pix & 0x4) >> 2) << (7 - y)
		data[16+x] = row

	return data

def Encode4bppTile(tile):
	data = bytearray(32)
	for line in xrange(0, 16, 2):
		offset = line * 4
		p1 = ((tile[offset+0] & 0x3) << 6) | ((tile[offset+1] & 0x3) << 4) | ((tile[offset+2] & 0x3) << 2) | (tile[offset+3] & 0x3)
		p2 = ((tile[offset+0] & 0xC) << 4) | ((tile[offset+1] & 0xC) << 2) | (tile[offset+2] & 0xC) | ((tile[offset+3] & 0xC) >> 2)
		p3 = (tile[offset+4] & 0x3) << 6 | (tile[offset+5] & 0x3) << 4 | (tile[offset+6] & 0x3) << 2 | tile[offset+7] & 0x3
		p4 = (tile[offset+4] & 0xC) << 4 | (tile[offset+5] & 0xC) << 2 | (tile[offset+6] & 0xC) | (tile[offset+7] & 0xC) >> 2
		data[line], data[line+1] = Encode2Byte(p1, p3)
		data[line+16], data[line+17] = Encode2Byte(p2, p4)
	return data

def Encode8bppTile(tile):
	data = bytearray(64)
	for line in xrange(0, 16, 2):
		offset = line * 4
		p1 = (tile[offset+0] & 0x3) << 6 | (tile[offset+1] & 0x3) << 4 | (tile[offset+2] & 0x3) << 2 | tile[offset+3] & 0x3
		p2 = (tile[offset+0] & 0xC) << 4 | (tile[offset+1] & 0xC) << 2 | (tile[offset+2] & 0xC)      | (tile[offset+3] & 0xC) >> 2
		p3 = (tile[offset+4] & 0x3) << 6 | (tile[offset+5] & 0x3) << 4 | (tile[offset+6] & 0x3) << 2 | tile[offset+7] & 0x3
		p4 = (tile[offset+4] & 0xC) << 4 | (tile[offset+5] & 0xC) << 2 | (tile[offset+6] & 0xC)      | (tile[offset+7] & 0xC) >> 2
		data[line], data[line+1] = Encode2Byte(p1, p3)
		data[line+16], data[line+17] = Encode2Byte(p2, p4)

		p5 = (tile[offset+0] & 0x30) << 2 | (tile[offset+1] & 0x30)      | (tile[offset+2] & 0x30) >> 2 | (tile[offset+3] & 0x30) >> 4
		p6 = (tile[offset+0] & 0xC0)      | (tile[offset+1] & 0xC0) >> 2 | (tile[offset+2] & 0xC0) >> 4 | (tile[offset+3] & 0xC0) >> 6
		p7 = (tile[offset+4] & 0x30) << 2 | (tile[offset+5] & 0x30)      | (tile[offset+6] & 0x30) >> 2 | (tile[offset+7] & 0x30) >> 4
		p8 = (tile[offset+4] & 0xC0)      | (tile[offset+5] & 0xC0) >> 2 | (tile[offset+6] & 0xC0) >> 4 | (tile[offset+7] & 0xC0) >> 6
		data[line+32], data[line+33] = Encode2Byte(p5, p7)
		data[line+48], data[line+49] = Encode2Byte(p6, p8)
	return data

def EncodeLinear2Tile(tile):
	data = bytearray(0)
	for i in xrange(0, 16):
		c = tile[i]
		tile.append(c & 0x3)
		tile.append((c & 0xC) >> 2)
		tile.append((c & 0x30) >> 4)
		tile.append((c & 0xC0) >> 6)
	return data 

def EncodeLinear4Tile(tile):
	return bytearray(tile)

def EncodeLinear8Tile(tile):
	return bytearray(tile)

def Decode2bppTile(data):
	tile = bytearray(0)
	for line in xrange(0, 16, 2):
		# Single bitplane
		a1, b1 = Decode2Byte(data[line], data[line+1])
		tile.append((b1 & 0xC0) >> 6)
		tile.append((b1 & 0x30) >> 4)
		tile.append((b1 & 0x0C) >> 2)
		tile.append(b1 & 0x03)
		tile.append((a1 & 0xC0) >> 6)
		tile.append((a1 & 0x30) >> 4)
		tile.append((a1 & 0x0C) >> 2)
		tile.append(a1 & 0x03)
	return tile

def Decode3bppTile(data):
	tile = Decode2bppTile(data)

	# Add the extra 3rd bit
	for x in xrange(0,8):
		b = data[16+x]
		for y in xrange(0,8):
			tile[x*8+y] |= ((b >> (7 - y)) & 1) << 2
	return tile

def Decode4bppTile(data):
	tile = bytearray(0)
	for line in xrange(0, 16, 2):
		# Double bitplane
		a1, b1 = Decode2Byte(data[line], data[line+1])
		a2, b2 = Decode2Byte(data[line+16], data[line+17])

		tile.append( (b1 & 0xC0) >> 6 | (b2 & 0xC0) >> 4)
		tile.append( (b1 & 0x30) >> 4 | (b2 & 0x30) >> 2 )
		tile.append( (b1 & 0x0C) >> 2 | (b2 & 0x0C) )
		tile.append( (b1 & 0x03)      | (b2 & 0x03) << 2 ) 
		tile.append( (a1 & 0xC0) >> 6 | (a2 & 0xC0) >> 4)
		tile.append( (a1 & 0x30) >> 4 | (a2 & 0x30) >> 2 )
		tile.append( (a1 & 0x0C) >> 2 | (a2 & 0x0C) )
		tile.append( (a1 & 0x03)      | (a2 & 0x03) << 2 ) 
	return tile

def Decode8bppTile(data):
	tile = bytearray(0)
	for line in xrange(0, 16, 2):
		# Quad bitplane
		a1, b1 = Decode2Byte(data[line], data[line+1])
		a2, b2 = Decode2Byte(data[line+16], data[line+17])
		a3, b3 = Decode2Byte(data[line+32], data[line+33])
		a4, b4 = Decode2Byte(data[line+48], data[line+49])

		tile.append( (b1 & 0xC0) >> 6 | (b2 & 0xC0) >> 4 | (b3 & 0xC0) >> 2 | (b4 & 0xC0) )
		tile.append( (b1 & 0x30) >> 4 | (b2 & 0x30) >> 2 | (b3 & 0x30)      | (b4 & 0x30) << 2 )
		tile.append( (b1 & 0x0C) >> 2 | (b2 & 0x0C)      | (b3 & 0x0C) << 2 | (b4 & 0x0C) << 4 )
		tile.append( (b1 & 0x03)      | (b2 & 0x03) << 2 | (b3 & 0x03) << 4 | (b4 & 0x03) << 6 )

		tile.append( (a1 & 0xC0) >> 6 | (a2 & 0xC0) >> 4 | (a3 & 0xC0) >> 2 | (a4 & 0xC0) )
		tile.append( (a1 & 0x30) >> 4 | (a2 & 0x30) >> 2 | (a3 & 0x30)      | (a4 & 0x30) << 2 )
		tile.append( (a1 & 0x0C) >> 2 | (a2 & 0x0C)      | (a3 & 0x0C) << 2 | (a4 & 0x0C) << 4 )
		tile.append( (a1 & 0x03)      | (a2 & 0x03) << 2 | (a3 & 0x03) << 4 | (a4 & 0x03) << 6 )

	return tile

def DecodeLinear2Tile(data):
	tile = bytearray(0)
	for i in xrange(0, 16):
		c = data[i]
		tile.append(c & 0x3)
		tile.append((c & 0xC) >> 2)
		tile.append((c & 0x30) >> 4)
		tile.append((c & 0xC0) >> 6)
	return tile

def DecodeLinear4Tile(data):
	tile = bytearray(0)
	for i in xrange(0, 32):
		c = data[i]
		tile.append(c & 0xF)
		tile.append((c & 0xF0) >> 4)
	return tile

def DecodeLinear8Tile(data):
	return bytearray(data)
