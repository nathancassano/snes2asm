# -*- coding: utf-8 -*-

import unittest
from snes2asm import brr
from io import BytesIO
import wave

class BRRTest(unittest.TestCase):

	brr_sample = bytearray([0xb0,0x00,0x01,0x12,0x22,0x33,0x34,0x44,0x44,0x8c,0x6d,0x01,0x01,0x10,0x10,0x11,0x01,0x01,0x5c,0x72,0x20,0x11,0x01,0xff,0xca,0xad,0x47,0x74,0xfe,0xde,0xdf,0xf0,0x00,0xec,0x9b,0x07,0x78,0x51,0x1f,0x23,0x01,0xf1,0x12,0x20,0x03,0x5c,0x01,0xea,0xaf,0xdd,0xd0,0x75,0x30,0x00,0x6c,0x00,0xf1,0x35,0x20,0xf3,0x53,0xee,0xec,0x5f,0xb9,0xfd,0x54,0x5f,0x1f,0x10,0x0f,0x10])

	wav_good_data = bytearray([0x52,0x49,0x46,0x46,0x24,0x01,0x00,0x00,0x57,0x41,0x56,0x45,0x66,0x6d,0x74,0x20,0x10,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x00,0x7d,0x00,0x00,0x00,0xfa,0x00,0x00,0x02,0x00,0x10,0x00,0x64,0x61,0x74,0x61,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x08,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x80,0x25,0x62,0x26,0x80,0x26,0xfe,0x26,0xc8,0x26,0xfe,0x26,0x8c,0x27,0x5e,0x27,0x9a,0x27,0x2a,0x27,0x30,0x27,0x96,0x27,0x48,0x27,0x6a,0x27,0xe6,0x26,0xdc,0x26,0x16,0x27,0xe6,0x26,0x62,0x26,0x5c,0x25,0x10,0x24,0x90,0x22,0xcc,0x20,0xf8,0x1e,0xde,0x1c,0x94,0x1a,0xca,0x17,0x64,0x14,0x8c,0x10,0xc8,0x0c,0x04,0x0a,0x7a,0x08,0x74,0x07,0xfe,0x05,0x20,0x04,0xde,0x02,0x32,0x01,0xa0,0x00,0x16,0x00,0x16,0x00,0x16,0x00,0x16,0x00,0x16,0xff,0x26,0xfd,0xd4,0xf9,0xb8,0xf7,0x3e,0xf8,0x3c,0xfc,0x96,0x02,0xf2,0x08,0x1e,0x0f,0xec,0x13,0xca,0x18,0x12,0x1e,0x14,0x22,0x44,0x25,0x94,0x26,0x1a,0x27,0xdc,0x26,0x68,0x26,0xc6,0x25,0xfe,0x23,0x32,0x21,0x06,0x1f,0xc4,0x1c,0x9a,0x1a,0x2c,0x18,0x10,0x15,0x74,0x11,0x1e,0x0e,0xcc,0x0a,0x8c,0x07,0x68,0x04,0xc8,0x01,0x7c,0x00,0x0a,0x00,0x0a,0x00,0x06,0x00,0x00,0x00,0xfa,0xff,0xf4,0xff,0xee,0xff,0xa6,0xff,0xac,0xff,0x70,0x00,0x4c,0x02,0x44,0x04,0xcc,0x05,0xb2,0x06,0x10,0x08,0x4a,0x0a,0xae,0x0c,0xea,0x0d,0x32,0x0e,0xb0,0x0d,0x0e,0x0c,0xe8,0x09,0x20,0x07,0x9e,0x04,0x20,0x02,0xae,0x00,0xfe,0xff,0x0e,0x00,0xf8,0xff,0x04,0x00,0xec,0xff,0xf8,0xff,0x00,0x00,0x06,0x00,0xea,0xff,0xf2,0xff,0xf6,0xff])

	def test_decode(self):

		wav_data = brr.decode(self.brr_sample)
		wav = wave.Wave_read(BytesIO(wav_data))
		wav_good = wave.Wave_read(BytesIO(self.wav_good_data))

		for x in range(0,64):
			self.assertEqual(wav_good.readframes(1), wav.readframes(1), "Decoded sample %d" % x)

	def test_encode(self):

		# Encode the WAV back to BRR
		encoded_brr = brr.encode(self.wav_good_data)

		# Verify BRR data was generated
		self.assertIsNotNone(encoded_brr)
		self.assertGreater(len(encoded_brr), 0)

		# Should be multiple of 9 bytes (BRR blocks)
		self.assertEqual(len(encoded_brr) % 9, 0)

		for x in range(0,64):
			self.assertEqual(self.brr_sample[x], encoded_brr[x], "Encoded sample %d" % x)


if __name__ == '__main__':
    unittest.main()
