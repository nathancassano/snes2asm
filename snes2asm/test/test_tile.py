# -*- coding: utf-8 -*-

import unittest
from snes2asm.tile import *
from snes2asm.bitmap import *

class TileTest(unittest.TestCase):

	def test_tile2bpp(self):
		snes_tile_encoded = bytearray([0x00, 0x01, 0x01, 0x02, 0x03, 0x04, 0x07, 0x08, 0x0f, 0x10, 0x1f, 0x20, 0x3f, 0x40, 0xff, 0xff])	
		snes_tile_decoded = Decode2bppTile(snes_tile_encoded)
		self.assertEqual(snes_tile_encoded, Encode2bppTile(snes_tile_decoded))

	def test_tile3bpp(self):
		snes_tile_encoded = bytearray([0xff, 0x00, 0x3f, 0xc0, 0xfe, 0x01, 0xfe, 0x01, 0xde, 0x21, 0x3e, 0xc1, 0xfe, 0x01, 0xc0, 0x3f, 0xc1, 0x21, 0x22, 0x22, 0xc4, 0x08, 0x30, 0xc0])	
		snes_tile_decoded = Decode3bppTile(snes_tile_encoded)
		self.assertEqual(snes_tile_encoded, Encode3bppTile(snes_tile_decoded))

	def test_tile4bpp(self):
		snes_tile_encoded = bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x38, 0x7f, 0x47, 0xcc, 0xb8, 0x04, 0x11, 0x70, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x3c, 0x04, 0x77, 0x04, 0x8d, 0x7a, 0x0f, 0x00])
		snes_tile_decoded = Decode4bppTile(snes_tile_encoded)
		self.assertEqual(snes_tile_encoded, Encode4bppTile(snes_tile_decoded))

	def test_tile8bpp(self):
		snes_tile_encoded = bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x38, 0x7f, 0x47, 0xcc, 0xb8, 0x04, 0x11, 0x70, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x3c, 0x04, 0x77, 0x04, 0x8d, 0x7a, 0x0f, 0x00]*2)
		snes_tile_decoded = Decode8bppTile(snes_tile_encoded)
		self.assertEqual(snes_tile_encoded, Encode8bppTile(snes_tile_decoded))

if __name__ == '__main__':
    unittest.main()
